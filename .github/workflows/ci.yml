# Name of the workflow. This is displayed in the GitHub Actions UI for easy
# identification among multiple workflows in the repository.
name: ci

# Defines the events that trigger this workflow to run automatically.
on:
  # Trigger the workflow on pull request events, such as opening, updating,
  # or synchronizing a PR.
  pull_request:
    # Only run when the target (base) branch of the PR is 'main'.
    branches: [main]

# Defines the jobs to run in this workflow. Jobs run in parallel by default.
jobs:
  # Job 1: Runs unit tests and security checks (gosec).
  tests:
    name: Tests
    runs-on: ubuntu-latest

    steps:
      # Checkout the code.
      - name: Check out code
        uses: actions/checkout@v4

      # Set up Go. Pin to a specific version for reproducibility.
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23.0"

      # Run tests with coverage first to verify functionality.
      - name: Run Unit Tests with Coverage
        run: go test -cover ./...

      # --- Security (gosec) after tests ---
      # gosec is not part of the Go toolchain, so we install it on the runner.
      # Note: On the first push, it's acceptable for this step to fail to prove
      # that gosec is actually running. After fixing findings, this job should pass.
      - name: Install gosec (static application security testing)
        run: go install github.com/securego/gosec/v2/cmd/gosec@latest

      # (Optional but helpful for debugging): print the installed version.
      - name: Show gosec version
        run: $(go env GOPATH)/bin/gosec -version

      # Run gosec on the entire module. gosec returns non-zero on findings/build errors
      # which will fail the job until issues are fixed.
      - name: Run gosec
        run: $(go env GOPATH)/bin/gosec ./...

  # Job 2: Checks code formatting and linting.
  style:
    name: Style
    runs-on: ubuntu-latest

    steps:
      # Checkout the code.
      - name: Check out code
        uses: actions/checkout@v4

      # Set up Go.
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23.0"

      # Install staticcheck for linting.
      - name: Install Staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest

      # Check formatting. `go fmt` prints changed files; empty output means OK.
      - name: Check Formatting
        run: test -z "$(go fmt ./...)"

      # Lint with staticcheck, using text format for clearer CI logs.
      - name: Run Linting
        run: staticcheck -f text ./...  # config auto-loaded from staticcheck.conf if present